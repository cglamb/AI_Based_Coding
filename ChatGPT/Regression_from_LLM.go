//the following was generated by ChatGPT 4
//the exercise was to attempt to use the AI tool to replicate the go based code produced in this library; https://github.com/cglamb/LinearRegression_Benchmarking

package main

import (
	"fmt"

	"github.com/montanaflynn/stats"
)

func main() {
	// Define your datasets here
	x1 := []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5}
	y1 := []float64{8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68}
	x2 := []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5}
	y2 := []float64{9.14, 8.14, 8.74, 8.77, 9.26, 8.1, 6.13, 3.1, 9.13, 7.26, 4.74}
	x3 := []float64{10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5}
	y3 := []float64{7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73}
	x4 := []float64{8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8}
	y4 := []float64{6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.5, 5.56, 7.91, 6.89}

	// Calculate, round, and print slope and intercept for Dataset1
	m1, b1 := linearRegression(x1, y1)
	fmt.Printf("Dataset1 - Slope: %s, Intercept: %s\n", fmt.Sprintf("%.4f", m1), fmt.Sprintf("%.4f", b1))

	// Calculate, round, and print slope and intercept for Dataset2
	m2, b2 := linearRegression(x2, y2)
	fmt.Printf("Dataset2 - Slope: %s, Intercept: %s\n", fmt.Sprintf("%.4f", m2), fmt.Sprintf("%.4f", b2))

	// Calculate, round, and print slope and intercept for Dataset3
	m3, b3 := linearRegression(x3, y3)
	fmt.Printf("Dataset3 - Slope: %s, Intercept: %s\n", fmt.Sprintf("%.4f", m3), fmt.Sprintf("%.4f", b3))

	// Calculate, round, and print slope and intercept for Dataset4
	m4, b4 := linearRegression(x4, y4)
	fmt.Printf("Dataset4 - Slope: %s, Intercept: %s\n", fmt.Sprintf("%.4f", m4), fmt.Sprintf("%.4f", b4))
}

func linearRegression(x, y []float64) (slope, intercept float64) {
	meanX, _ := stats.Mean(x)
	meanY, _ := stats.Mean(y)
	stdDevX, _ := stats.StandardDeviation(x)
	stdDevY, _ := stats.StandardDeviation(y)
	corr, _ := stats.Correlation(x, y)

	slope = corr * (stdDevY / stdDevX)
	intercept = meanY - slope*meanX

	return slope, intercept
}
